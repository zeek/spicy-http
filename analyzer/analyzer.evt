# Copyright (c) 2021 by the Zeek Project. See LICENSE for details.

protocol analyzer spicy::HTTP over TCP:
    parse originator with HTTP::Requests,
    parse responder with HTTP::Replies,
    replaces HTTP;

import Zeek_HTTP;

on HTTP::Message::%init        -> event http_begin_entity($conn, $is_orig) &priority=5;
on HTTP::Message               -> event http_end_entity($conn, $is_orig) &priority=5;
on HTTP::Message::%error       -> event http_end_entity($conn, $is_orig) &priority=5;

on HTTP::Message               -> event http_message_done($conn, $is_orig, Zeek_HTTP::create_http_message_stats(self));
on HTTP::Message::%error       -> event http_message_done($conn, $is_orig, Zeek_HTTP::create_http_message_stats(self));

on HTTP::Message::end_of_hdr   -> event http_content_type($conn, $is_orig, self.content_type[0], self.content_type[1]);

on HTTP::Content::data         -> event http_entity_data($conn, $is_orig, |self.data|, self.data);
on HTTP::ReplyLine             -> event http_reply($conn, self.version.number, self.status, self.reason);
on HTTP::RequestLine           -> event http_request($conn, self.method, self.uri, self.uri, self.version.number);

@if ZEEK_VERSION < 30200
    on HTTP::Header                -> event http_header($conn, $is_orig, self.name.upper(), self.content);
    on HTTP::Message::end_of_hdr   -> event http_all_headers($conn, $is_orig, Zeek_HTTP::convert_all_headers_v30(self.headers));
@else
    on HTTP::Header                -> event http_header($conn, $is_orig, self.name, self.name.upper(), self.content);
    on HTTP::Message::end_of_hdr   -> event http_all_headers($conn, $is_orig, Zeek_HTTP::convert_all_headers_v32(self.headers));
@endif
